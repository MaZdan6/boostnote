createdAt: "2019-06-16T07:31:39.360Z"
updatedAt: "2020-06-20T18:24:53.911Z"
type: "MARKDOWN_NOTE"
folder: "a7e795acb6fcea97a14c"
title: "TypeScript"
tags: []
content: '''
  # TypeScript
  
  ## Variable Declarations
  [Variable Declarations · TypeScript](https://www.typescriptlang.org/docs/handbook/variable-declarations.html)
  
  ### var
  ```typescript
  var a = 10;
  ```
  
  ## konfiguracja
  ### tsconfig.ts
  * Simple JSON text file named tsconfig.json
  * Stores compiler options used with the project
  * Specifies files to be included or excluded in compilation
  * Supports configuration inheritance
  
  
  
  przykład 
  ```javascript
  {
    "extends": "../tsconfig.base", /**/rozszerza konfigurację z innego pliku
    "compilerOptions": {
      "removeComments": true /*usuwa komentarze w plikach skompilowanych*/
    },
    "include": [
      "./**/*" /*kompiluje wszystkie pliki .ts w folderach*/
    ]
  }
  ```
  
  #### popularne flagi
  ```javascript
   "target": "es5",/* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */
     
  "sourceMap": true,/* Generates corresponding '.map' file. */
     "outDir": "js",/* Redirect output structure to the directory. */
     "strict": true,/* Enable all strict type-checking options. */
     "watch":true
  
  ```
  
  ### linia poleceń
  
  * wersja : tsc -version
  * inicjalizacja projektu (tworzy tsconfig.json): tsc --init
  * kompilowanie plików (w folderze z plikami .tsc): tsc
  * uruchomienie: npm start
  * update wersji: npm install -g typescript@rc
  
  ## Webpack
  webpack.config.js
  ```javascript 
  module.exports = {
    entry: './app/app.ts',
    devtool: 'inline-source-map',
    module: {
      rules: [
        {
          test: /\\.tsx?$/, jakie pliki kompilować
          use: 'ts-loader', uzywaj do kompilacji ts-loader
          exclude: /node_modules/
        }
      ]
    },
    resolve: {
      extensions: [ '.tsx', '.ts', '.js' ]
    },
    output: {
      filename: 'bundle.js' info do przeglądarki gdzie są kody
    },
    devServer: {
      inline: false
    }
  };
  ```
  
  ## 3 Typy danych
  
  ### Podstawowe typy danych
  ```js
  Boolean
  let isDone: boolean = false;
  
  
  Number
  let decimal: number = 6;
  let hex: number = 0xf00d;
  let binary: number = 0b1010;
  let octal: number = 0o744;
  let big: bigint = 100n;
  
  String
  
  przykład: łączenie stringów z liczbami
  let fullName: string = `Bob Bobbington`;
  let age: number = 37;
  let sentence: string = `Hello, my name is ${fullName}.
  I'll be ${age + 1} years old next month.`;
  
  Array
  let list: number[] = [1, 2, 3];
  
  lista z zadeklarowanym typem:
  let list: Array<number> = [1, 2, 3];
  
  
  Enum
  enum Color {
    Red,
    Green,
    Blue,
  }
  let c: Color = Color.Green;
  ```
  
  ### let - zmienna z zakresem bloku
  ```js
  let someString = 'Hello World';
  console.log(someString);
  
  definiowanie typu zmiennej
  let x: string = 'I will forever be a string.';
  
  przykład"
  let x: string = 'I will forever be a string.';
  x = 42; - błąd kompilacji, zmienna jest typu string
  let y = 'I will also forever be a string.';
  ```
  ### var - zmienn z zakresem funkcji
  
  ```js
  console.log(someString);
  var someString = 'Hello World';
  ```
  
  ### inne typy danych
  ```js
  Void
  Null
  Undefined
  Never
  Any
  ```
  
  ### Unia typów
  zmienna może przyjąć wartości kilku typów
  ```js
  let someValue: number | string;
  someValue = 42; PRZYJMIE LICZBĘ
  someValue = 'Hello World'; PRZYJMIE STRING
  someValue = true; BŁĄD, NIE MOZE PRZYJĄC BOOLENA
  ```
  
  ### flaga strictNullChecks
  sprawdza podczas kompilacji, czy żadna zmienna nie ma przypisanej pustej wartości
  
  należy ustawić flagę --strictNullChecks w pliku tsconfig.ts
  
  ```js
  let basicString: string;
  basicString = null;  BŁĄD
  basicString = undefined;  BŁĄD
  
  let nullableString: string | null;
  nullableString = null;
  nullableString = undefined; BŁĄD
  
  let mysteryString: string | null | undefined;
  mysteryString = null;
  ```
  
  ## 4 funkcje
  ```js
  function funFunc(score: number, message?: string): string {
  return "I've got personality and I'm helpful! Be like me!";
  }
  
  message?: string - parametr opcjonalny typu string
  
  funkcja zwraca zmienną typu string
  parametr score jest obowiązkowy
  ```
  
  * domyślna wartość argumentu
  ```js
  function sendGreeting(greeting: string = 'Good morning!'): void {
  }
  
  
  wywołanie:
  sendGreeting(); // Good morning!
  sendGreeting('Good afternoon!'); // Good afternoon!
  ```
  * wyrażenia lambda (arrow function)
  ```js
  parameters => function body
  
  przykład:
  let squareit = x => x * x;
  let result = squareit(4); // 16
  
  let adder = (a, b) => a + b;
  let sum = adder(2, 3); // 5
  
  let greeting = () => console.log('Hello World!');
  
  wyrażenie lambda w tablicy:
  
  let scores: number[] = [70, 125, 85, 110];
  
  let highScores: number[];
  
  highScores = scores.filter((element, index, array) => {
    if (element > 100) {
      return true;
    }
  });
  ```
  
  ## 5 Obiektowość
  
  ### interface
  ```javascript
  Tworzenie:
  
  interface Employee {
    //deklaracja zmiennych
    name: string;
    title: string;
  }
  
  Rozszerzanie:
  
  interface Manager extends Employee {
    
    department: string;
    numOfEmployees: number;
    
    //deklaracja metody
    scheduleMeeting: (topic: string) => void;
  }
  
  ```
  
  ### klasa
  ```js
  class Developer {
    //pole publiczne
    department: string;
   
    //pole prywatne
    private _title: string;
   
    // gettery i settery
    get title(): string {
      return this._title;
    }
    
    set title(newTitle: string) {
      this._title = newTitle.toUpperCase();
    }
   
    //funkcja (metoda)
    documentRequirements(requirements: string): void {
      console.log(requirements);
    }
  }
  
  
  //dziedziczenie
  class WebDeveloper extends Developer {
  }
  
  
  //instancja
  let webdev: WebDeveloper = new WebDeveloper();
  
  
  //constructor
  class Developer {
    
    constructor() {
      console.log('Creating a new developer.');
    }
  }
  
  class WebDeveloper extends Developer {
    
    readonly favoriteEditor: string;
    
    constructor(editor: string) {
      //wywołanie konstruktora dziedziczonej klasy
      super();
      this.favoriteEditor = editor;
    }
  }
  
  
  //pole statyczne
  class WebDeveloper extends Developer {
    static jobDescription: string = 'Build cool things!';
    
    static logFavoriteProtocol() {
    console.log('HTTPS, of course!');
    }
    
    logJobDescription(): void {
    console.log(WebDeveloper.jobDescription);
    }
  }
  WebDeveloper.logFavoriteProtocol();
  
  ```
  
  ## Tablice
  ```js
  let list: number[] = [1, 2, 3];
  lub
  let list: Array<number> = [1, 2, 3];
  
  ```
  
  dostęp do elementów
  ```js
  
  
  let fruits: string[] = ['Apple', 'Orange', 'Banana']; 
  fruits[0]; // returns Apple
  fruits[1]; // returns Orange
  fruits[2]; // returns Banana
  fruits[3]; // returns undefined
  ```
  
  pętla for
  ```js
  let fruits: string[] = ['Apple', 'Orange', 'Banana']; 
  
  for(var index in fruits)
  { 
      console.log(fruits[index]);  // output: Apple Orange Banana
  }
  
  for(var i = 0; i < fruits.length; i++)
  { 
      console.log(fruits[i]); // output: Apple Orange Banana
  }
  ```
  
  
  metody
  ```js
  var fruits: Array<string> = ['Apple', 'Orange', 'Banana']; 
  
  //sortowanie
  fruits.sort(); 
  console.log(fruits); //output: [ 'Apple', 'Banana', 'Orange' ]
  
  //usuwanie ostatatniego elementu i zwrócenie go
  console.log(fruits.pop()); //output: Orange
  
  //dodanie nowego elementu i zwrócenie nowej wielkości tablicy
  fruits.push('Papaya'); 
  console.log(fruits); //output: ['Apple', 'Banana', 'Papaya']
  
  //łączenie tablic
  fruits = fruits.concat(['Fig', 'Mango']); 
  console.log(fruits); //output: ['Apple', 'Banana', 'Papaya', 'Fig', 'Mango'] 
  
  //zwrócenie indexu elementu
  console.log(fruits.indexOf('Papaya'));//output: 2
  
  
  ```
'''
linesHighlighted: []
isStarred: false
isTrashed: false
