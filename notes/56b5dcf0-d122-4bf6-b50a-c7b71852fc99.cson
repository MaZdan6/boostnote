createdAt: "2019-05-05T12:02:45.847Z"
updatedAt: "2019-08-06T13:39:32.606Z"
type: "MARKDOWN_NOTE"
folder: "a38bc68bbb6e2970c167"
title: "Git"
content: '''
  # Git
  ## Export istniejącego kodu z repo lokalnego do zdalnego 
  
  1. commit : 
  ```
  git commit -m "Opis commita"
  ```
  
  2. dodanie adresu repozytorium zdalnego :
  ```
  git remote add origin adres 
  ```
  
  3. przesyłanie gałęzi z repozytorium lokalnego do repozytorium zdalnego 
  ```
  git push [nazwa repozytorium zdalnego] [nazwa gałęzi zdalnej] 
  ```
  
  ## Łączenie dwóch commitów 
  
   
  
  $ git rebase -i [id ostatniego commita]   
  squash [id przed ostatniego commita]  [komentarz] 
  
   
  
  ## Dodawanie lokalnego repozytorium do zdalnego 
  
   
  
  1. Stwórz lokalne repo z przynajmniej jednym commitem 
  
   
  
  2. ustaw nowe zdalne repo 
  
  ```bash  
    git remote add origin [remote repository URL]origin ori
  ``` 
  
   
  3. Zweryfikuj nowe zdalne repo 
  
  ```
  git remote -v
  ```
  
  4. Wyślij  gałąź główną do zdalnego repozytorium 
  ```
  git push origin master 
  ```
   
  
  ## Ignorowanie plików 
  
  gitignore 
  	
  
  plik zapisywany w obrzarze roboczym 
  
  .git/info/exclude 
  	
  
  plik zapisywany w repozytorium 
  
   
  
  ### reguły ignorowanych plików 
  
  *.[oa] 
  
  *.exe : **ignorowanie plików z końcówką '.exe'**
  
   
  
  /tmp : **ignorowanie plików z folderu 'tmp'** 
  
  
  ## Kurs
  ### Tworzenie repozytorium 
  
  git  init : **Tworzenie inicjalnego repo w folderze**
  
  git clone [hiperlink] : **klonowanie repo z zewnętrznego serwera**
  
  
  
  find . -type f -print | grep -v -E '/\\.git' | wc -l :**ustalenie liczby plików projektu**
  
  ### git log
  **liczba rewizji**
  ```
  git log --pretty=oneline | wc -l :
  ```
  
  **Przeglądanie zmian, sprawdzanie zmian wprowadzonych w repo.**
  ```
  git log
  ```
  
  [spacja] : **przewijanie wyników**
  
  [Q]- **wyłączanie**
  
  **wydrukowanie info o trzech ostatnich rewizjach**
  ```
  git log -3
  ```
  
  **sprawdzenie  uczestników projektu**
  ```
  git shortlog -s -n
  ```
  **sprawdzenie liczby uczestników projektu**
  ```
  git shortlog -s -n | wc -l
  ```
'''
tags: []
isStarred: false
isTrashed: false
linesHighlighted: []
