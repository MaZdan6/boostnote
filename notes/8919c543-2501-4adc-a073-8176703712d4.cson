createdAt: "2019-08-16T12:38:35.274Z"
updatedAt: "2021-02-13T15:48:07.714Z"
type: "MARKDOWN_NOTE"
folder: "aca1f8e65d06e28b00e0"
title: "T-SQL"
tags: []
content: '''
  # T-SQL
  
  [Blog firmy JSystems - Bezpłatny kurs T-SQL w SQL Server](http://blog.jsystems.pl/show_post/Bezp%C5%82atny_kurs_T-SQL_w_SQL_Server/)
  
  ## sp_executesql
  Skrypt tworzy sparametryzowane zapytanie i zapisuje jego wynik  w zmiennej
  
  ```sql
  --deklaracja zmiennych
  declare @SQLString nvarchar(500)  
         ,@ParmDefinition nvarchar(500)
         ,@column_name varchar(255)
         ,@nominal_sum_out int
         ,@id_jednostki int
  
  --ustawienie parametrów wejściowych
  set @column_name= 'nominal_500'
  set @id_jednostki=666
  
  --deklaracja zmiennych zapytania
  SET @ParmDefinition = N'@zmienna int OUTPUT
                                         ,@id_jednostki int';
  
  --zapytania
  set @SQLString= N'select @zmienna = sum('+@column_name+') 
                                   from _tabela 
                                   where id_jednostki=@id_jednostki'
  
  --wywołanie zapytania
  EXECUTE sp_executesql @SQLString, @ParmDefinition
               ,@zmienna OUTPUT
               ,@id_jednostki
               ,@typ_rejestracji
               ,@data_ksiegowa
  
  --wypisanie zmiennej
  select @nominal_sum_out
  ```
  
  ## cursor
  ```sql
  DECLARE kursor CURSOR FOR
    SELECT tekst,wartosc 
  	FROM dbo.table WHERE grupa = 'kryterium'
    OPEN kursor
    while 1=1
      BEGIN 
  	  FETCH NEXT FROM kursor_nominaly INTO @tekst,@wartosc
        if @@fetch_status <> 0 break
  						
          select @tekst,@wartosc
  	END 
  CLOSE kursor
  DEALLOCATE kursor
  ```
  ### TRY CATCH
  ```sql
  BEGIN TRY  
       --code to try 
  END TRY  
  BEGIN CATCH  
       --code to run if error occurs
  --is generated in try
  END CATCH
  ```
  ### transakcja
  ```sql
  
  DECLARE @TranName VARCHAR(20);
  
  SELECT @TranName = 'MyTransaction';
  
  BEGIN TRANSACTION @TranName;
  
    DELETE FROM AdventureWorks2012.HumanResources.JobCandidate
    WHERE JobCandidateID = 13;
  
  COMMIT TRANSACTION @TranName;
  ```
  ### komunikaty błędów
  * ERROR_NUMBER – Returns the internal number of the error
  * ERROR_STATE – Returns the information about the source
  * ERROR_SEVERITY – Returns the information about anything from informational errors to errors user of DBA can fix, etc.
  * ERROR_LINE – Returns the line number at which an error happened on
  * ERROR_PROCEDURE – Returns the name of the stored procedure or function
  * ERROR_MESSAGE – Returns the most essential information and that is the message text of the error
  
  ```sql
  	SELECT
  		ERROR_NUMBER() AS ErrorNumber,
  		ERROR_STATE() AS ErrorState,
  		ERROR_SEVERITY() AS ErrorSeverity,
  		ERROR_PROCEDURE() AS ErrorProcedure,
  		ERROR_LINE() AS ErrorLine,
  		ERROR_MESSAGE() AS ErrorMessage;
  ```
      
  
  
  ### tworzenie procedury
  ```sql
  USE database
  GO
  SET ANSI_NULLS ON
  GO
  SET QUOTED_IDENTIFIER ON
  GO
  -- =============================================
  -- Author:		autor
  -- Create date:
  -- Description:
  -- Test:
  -- =============================================
  IF OBJECT_ID('schemat._nazwa_procedury','P') IS NOT NULL
      BEGIN
          DROP PROCEDURE schemat._nazwa_procedury
      END
  GO
  CREATE PROCEDURE schemat._nazwa_procedury
      @param_data date = null,
      @debug_flaga bit=0
  AS
  BEGIN
      SET NOCOUNT ON;
      DECLARE
          _@uzytkownik_modyfikujacy as char(8),
          @_data_modyfikacji as datetime,
          @_kategoria_bledu as varchar(50),
          @_wynik_liczba as int=0,
          @_wynik_text as varchar(255)
      BEGIN TRANSACTION
      BEGIN TRY
          set @_kategoria_bledu = '_nazwa_procedury'
  
          IF @debug_flaga=1
              SELECT @_kategoria_bledu as '@_kategoria_bledu'
                   ,@param_data as '@param_data'
  
  
          SET _@uzytkownik_modyfikujacy='uzytkownik_modyfikujacy'
          SET @_data_modyfikacji=getdate();
  
  
          SET @_wynik_liczba = 0
          SET @_wynik_text = 'wynik_text'
          COMMIT TRANSACTION
          RETURN @_wynik_liczba
      END TRY
      BEGIN CATCH
  
          IF @@TRANCOUNT <> 0
              BEGIN
                  ROLLBACK TRANSACTION
              END
          SET @_wynik_liczba = -1
          SET @_wynik_text = 'error'
          --obsługa błędu
      END CATCH
  
  END
  GO
  ```
  ### funkcja
  ```sql
  USE [bm2]
  GO
  
  SET ANSI_NULLS ON
  GO
  SET QUOTED_IDENTIFIER ON
  GO
  -- =============================================
  -- Author:		
  -- Create date: 
  -- Description:	
  -- Test: 
  -- =============================================
  IF OBJECT_ID('schemat._nazwa_funkcji','FN') is not null
      BEGIN
          DROP FUNCTION [schemat]._nazwa_funkcji
      END
  GO
  CREATE FUNCTION [schemat].[_nazwa_funkcji] (
      @param_rach AS INT,
      @param_char AS CHAR(2))
      RETURNS CHAR(1)
  AS
  BEGIN
  
      DECLARE @_zwracana_wartosc as char(1)
  
      IF @param_char='wn'
          BEGIN
              SELECT @_zwracana_wartosc=nazwa_kolumny FROM schemat.nazwa_tabeli WHERE param_rach=@param_rach
          END
  
      RETURN @_zwracana_wartosc
  
  END
  GO
  ```
  
  ### Usuwanie procedury, jeżeli istnieje
  ```sql
  if OBJECT_ID('dbo._kopiuj_info_do_transakcji', 'P') is not null
  begin
    drop procedure dbo._kopiuj_info_do_transakcji
  end
  ```	
  AF = Aggregate function (CLR)
  C = CHECK constraint
  D = DEFAULT (constraint or stand-alone)
  F = FOREIGN KEY constraint
  **FN = SQL scalar function**
  FS = Assembly (CLR) scalar-function
  FT = Assembly (CLR) table-valued function
  IF = SQL inline table-valued function
  IT = Internal table
  **P = SQL Stored Procedure**
  PC = Assembly (CLR) stored-procedure
  PG = Plan guide
  PK = PRIMARY KEY constraint
  R = Rule (old-style, stand-alone)
  RF = Replication-filter-procedure
  S = System base table
  SN = Synonym
  SO = Sequence object
  **U = Table (user-defined)**
  V = View
  
  ## miejsca wywołań procedury
  ```sql
  declare @procedure_name as varchar(100)
  set @procedure_name = '_km'
  
  select schema_name(o.schema_id) + '.' + o.name as [procedure],
         'is used by' as ref,
         schema_name(ref_o.schema_id) + '.' + ref_o.name as [object],
         ref_o.type_desc as object_type
  from sys.objects o
  join sys.sql_expression_dependencies dep
       on o.object_id = dep.referenced_id
  join sys.objects ref_o
       on dep.referencing_id = ref_o.object_id
  where o.type in ('P', 'X')
        and schema_name(o.schema_id) = 'dbo'  -- put schema name here
        and o.name = @procedure_name -- put procedure name here
  order by [object];
  ```
  
  ### if exist
  
  ### wartość zmiennej z zapytania
'''
linesHighlighted: []
isStarred: false
isTrashed: false
