createdAt: "2019-08-19T20:00:47.211Z"
updatedAt: "2019-10-20T21:37:25.972Z"
type: "MARKDOWN_NOTE"
folder: "99518829502f949bd844"
title: "Spring Helion"
tags: []
content: '''
  # Spring Helion
  
  ## 3 konfiguracja komponentów
  ### Dziedziczenie abstrakcyjnej definicji komponentu
  
  #### 3.1 **Abstrakcyjna definicja komponentu** 
  * nie zawiera żadnej klasy w atrybucie class=""
  ```xml
  <bean id="daoTemplate" abstract="true">
  		<property name="databaseOperations" ref="databaseOperations" />
  	</bean>
  ```
  
  * Klasa dziedziczy referencje zawarte w definicji i umieszcza je w swoich atrybutach
  
  
  
  ```xml
  <bean id="personalBankingDao" parent="daoTemplate"
  		class="sample.spring.chapter03.bankapp.dao.PersonalBankingDaoImpl" />
  ```
  
  * Bean **personalBankingDao** dziedziczy referencję **databaseOperations** znajdującą się w definicji **daoTemplate**
  * **databaseOperations** jest polem klasy **PersonalBankingDaoImpl**
  
  przykład: ch03-bankapp-inheritance
  
  
  
  #### 3.2 **NieAbstrakcyjna definicja komponentu**  
  * zawiera klasę w atrybucie class="referencjaDoKlasy"
  
  ```xml
  <bean id="serviceTemplate"
  		class="sample.spring.chapter03.bankapp.base.ServiceTemplate">
  		<property name="jmsMessageSender" ref="jmsMessageSender" />
  		<property name="emailMessageSender" ref="emailMessageSender" />
  		<property name="webServiceInvoker" ref="webServiceInvoker" />
  	</bean>
  ```
  Definicja **serviceTemplate** zawiera referencje do klas
  jmsMessageSender, emailMessageSender i webServiceInvoker
  
  ```xml
  <bean id="fixedDepositService"
  		class="sample.spring.chapter03.bankapp.service.FixedDepositServiceImpl"
  		parent="serviceTemplate">
  		<property name="fixedDepositDao" ref="fixedDepositDao" />
  	</bean>
  ```
  * Bean **fixedDepositService** dziedziczy referencje po **serviceTemplate**
  
  * klasa **FixedDepositServiceImpl** dziedziczy po klasie **ServiceTemplate**
  
  #### 3.3 Dopasowanie argumentu konstruktora 
  
  Składnia
  ```xml
  <constructor-arg name="nazwa_pola" ref="nazwa_beana_wstrzykiwanego do konstruktora" />
  ```
  
  Przykład:
  ```java
  public class UserRequestControllerImpl implements UserRequestController {
  	private ServiceTemplate serviceTemplate;
  	
  	@ConstructorProperties({"serviceTemplate"})
  	public UserRequestControllerImpl(ServiceTemplate serviceTemplate) {
  		this.serviceTemplate = serviceTemplate;
  	}
  	
  	@Override
  	public void submitRequest(Request request) {
  		// Wykonanie operacji z użyciem ServiceTemplate.
  		serviceTemplate.getJmsMessageSender(); // Na przykład wysłanie komunikatu JMS.
  	}
  }
  ```
  
  ```xml
  	<bean id="userRequestController"
  		class="sample.spring.chapter03.bankapp.controller.UserRequestControllerImpl">
  		<constructor-arg name="serviceTemplate" ref="serviceTemplate" />
  	</bean>
  ```
  
  atrybut value=""
  ```xml
  <constructor-arg name="nazwa_pola" value="wartość typu prostego" />
  ```
  Przykład 2:
  ```xml
  <bean id="transferFundsService"
  		class="sample.spring.chapter03.bankapp.service.TransferFundsServiceImpl">
  		<constructor-arg name="webServiceUrl" value="http://someUrl.com/xyz" />
  		<constructor-arg name="active" value="true" />
  		<constructor-arg name="numberOfRetrialAttempts" value="5" />
  		<constructor-arg name="timeout" value="200" />
  	</bean>
  ```
  * jeżeli wykorzystujemy atrybut name, to w konstruktorze klasy powinniśmy zastosować adnotację @ConstructorProperties({"nazwa_argumentu konstruktora"})
  
  np:
  ```java
  	@ConstructorProperties({"webServiceUrl","active","timeout","numberOfRetrialAttempts"})
  	public TransferFundsServiceImpl(String webServiceUrl, boolean active, long timeout,
  			int numberOfRetrialAttempts) {
  		this.webServiceUrl = webServiceUrl;
  		this.active = active;
  		this.timeout = timeout;
  		this.numberOfRetrialAttempts = numberOfRetrialAttempts;
  
  		logger.info("Adres URL usługi sieciowej: " + webServiceUrl + ", aktywna : " + active + ", limit czasu : "
  				+ timeout + ", numberOfRetrialAttempts "
  				+ numberOfRetrialAttempts);
  	}
  ```
  
  # 4 Wstrzykiwanie zależności
  
  ## 4.2 Komponent wewnętrzny
  
  ```xml
  	<bean id="service"
  		class="sample.spring.chapter04.bankapp.service.FixedDepositServiceImpl">
  		<property name="fixedDepositDao">
  			<bean class="sample.spring.chapter04.bankapp.dao.FixedDepositDaoImpl" />
  		</property>
  		<constructor-arg index="0"
  			value="META-INF/config/appConfig.properties" />
  	</bean>
  ```
  **fixedDepositDao** jest komponentem wewnętrznym **service**
  
  ## 4.3 Wyraźna kontrola kolejności inicjalizacji procesu za pomocą atrybutu depends-on
  
  ## 4.4 Zależności w postaci komponentów o zasięgu singleton i prototypu
  ## 4.5 Pobieranie w komponencie singleton nowego egzemplarza komponentu o zasięgu prototypu
  ## 4.6 Automatyczne wiązanie zależności
  
  ```xml
  	<bean id="customerRegistrationService"
  		class="sample.spring.chapter04.bankapp.service.CustomerRegistrationServiceImpl"
  		scope="prototype" 
          
          autowire="byType" />
  ```
  
  ### Typy wiązania zależności
  * **byType**-  wstrzykiwany jest bean odpowiedniej klasy
  * **byName**- wstrzykiwany jest bean, którego id odpowiada nazwie parametru klasy
  * **constructor** - wiąże beany odpowiadające typowi argumentu konstruktora
  * **no** - wartość domyślna atrybutu **autowire**. Wyłącza automatyczne wiązanie zależności
  
  ### Uniedostępnienie komponentu dla funkcji automatycznego wiązania
  
  ```xml
  <bean id="accountStatementDao"
  		class="sample.spring.chapter04.bankapp.dao.AccountStatementDaoImpl"
  		autowire-candidate="false" />
  ```
  ### Ogranieczenia automatycznego wiązania
  * nie można użyć do wstrzykiwania typów prostych (int, boolean, String)
  * ukrywa ogólną strukturę aplikacji . Utrudnia poznanie sposobu działania  i konserwację . Nie zaleca się stosowania automatycznego wiązania w dużych aplikacjach. 
  
  ## 5 Dostosowanie komponentów do ich definicji
  ### 5.2 Dostosowanie logiki inicjalizacji i usuwania komponentu
  
  ```xml
  <bean id="fixedDepositService"
  		class="sample.spring.chapter05.bankapp.service.FixedDepositServiceImpl">
  		<property name="myFixedDepositDao" ref="myFixedDepositDao" />
  	</bean>
  
  	<bean id="myFixedDepositDao"
  		class="sample.spring.chapter05.bankapp.dao.FixedDepositDaoImpl"
  		
          init-method="initializeDbConnection" 
          destroy-method="releaseDbConnection" 
      />
  
  ```
  
  #### init-method
  * **init-method="initializeDbConnection"**
  metoda wywoływana po utworzeniu obiektu, ale przed jego wstrzyknięciem
  
  #### destroy-method
  * **destroy-method="releaseDbConnection"**
  metoda wywoływana przed zamknięciem aplikacji
  
  
  Można ustawić domyślne metody inicjalizacji i usuwanie dla wielu komponentów w tagu beans
  ```xml
  <beans 
         default-init-method="nazwa_metody"
         default-destroy-method="nazwa_metody" >
    </beans>
  ```
  
  #### @PostConstruct @PreDestroy
  Powyższe odnotacje służą do oznaczenia metod wywoływanych podczas inicjalizacji/usuwania obiektu
  
  ```java
  ublic class FixedDepositDaoImpl implements FixedDepositDao {
  	private static Logger logger = Logger.getLogger(FixedDepositDaoImpl.class);
  	private DatabaseConnection connection;
  
  	public FixedDepositDaoImpl() {
  		logger.info("Wywołanie konstruktora klasy FixedDepositDaoImpl.");
  	}
  
  	@PostConstruct
  	public void initializeDbConnection() {
  		logger.info("Wywołanie metody initializeDbConnection() klasy FixedDepositDaoImpl.");
  		connection = DatabaseConnection.getInstance();
  	}
  
  	
  	public boolean createFixedDeposit(FixedDepositDetails fdd) {
  		logger.info("Wywołanie metody createFixedDeposit() klasy FixedDepositDaoImpl.");
  		// Zapis informacji o lokatach i zwrot wartości true.
  		return true;
  	}
  	
  	@PreDestroy
  	public void releaseDbConnection() {
  		logger.info("Wywołanie metody releaseDbConnection() klasy FixedDepositDaoImpl.");
  		connection.releaseConnection();
  	}
  }
  ```
  
  Aby adnotacje zostały przetworzone przez kontekst, należy w applicationContext.xml dodać inicjalizację bean:
  
  ```xml
  	<bean
  		class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>
  ```
  
  ### 5.3 Użycie interejsu BeanPostProcessor do pracy z nowo utworzonym egzemplarzem komponentu
  
'''
linesHighlighted: []
isStarred: true
isTrashed: false
